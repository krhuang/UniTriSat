[files]
polytopes_file = "Polytopes/small-lattice-polytopes/data/smooth/4_polytopes.txt"
log_file = "logs/4d_validated"

[run_settings]
process_range = "1-15"	# A space-separated list of indices and ranges (e.g., "1-5 8 10-"). "-" means all.
processing_order = "normal"	# Options: "normal", "reversed", "random"
sort_by = "P"			# "none": Use the order from the file. "P": Sort by # lattice points. "S": Sort by # simplices.
solve_mode = "first"		# "first": Stop after one solution. "all": Find all solutions. "count": Count all solutions.
find_all_simplices = false	# If true, finds all non-degenerate simplices. If false, only unimodular ones.
intersection_backend = "cpu"	# Options: "cpu", "gpu_rationals", "gpu_floats" 
validate = true            # If true, validate GPU-found solutions using the precise CPU backend.

[output_levels]
# Options for terminal_output:
# "verbose": Detailed, multi-line output for each step.
# "multi-line": A minimal summary line is printed for each completed polytope.
# "single-line": A summary block is updated in-place in the terminal.
# "none": No output to the terminal.
terminal_output = "single-line"

# Options for file_output: "verbose", "minimal", "none"
file_output = "verbose"

[verbose_options]
# These toggles only apply when an output level is set to "verbose".
show_initial_vertices = true
show_solution_simplices = true
show_timing_summary = true

[solver_options]
solver = "PicoSAT" # The SAT solver to use. PicoSAT or CryptoMiniSat.

[plotting]
plotter_script = "plot_triangulation.py"
plot_range = "" # Same format as process_range. Defines which solutions to plot.
